// lab 3: Lenny, Ben V, Colton
public class Chess {
    public static void main(String[] args) {
	char[][] chessBoard = new char[8][8];
	initialize(chessBoard);

	printChessBoard(chessBoard);
	
	addPiece('P', 'a', '7', chessBoard);
	addPiece('r', 'h', '1', chessBoard);
	addPiece('r', 'a', '1', chessBoard);
	addPiece('R', 'a', '8', chessBoard);
	addPiece('R', 'h', '8', chessBoard);
	addPiece('p', 'd', '1', chessBoard);
	printChessBoard(chessBoard);
	
	System.out.println("Black a6 to a1 " + rookPossibleMove('a', '1', 'a', '6', false, chessBoard)); //should return true
	System.out.println("Black a8 to h8 " + rookPossibleMove('h', '8', 'a', '8', false, chessBoard)); //should return false
	System.out.println("White a6 to b1 " + rookPossibleMove('b', '1', 'a', '6', true, chessBoard)); //should return false
	System.out.println("Black d3 to d7 " + rookPossibleMove('d', '7', 'd', '3', false, chessBoard)); //should print true
	System.out.println("Black a4 to h4 " + rookPossibleMove('h', '4', 'a', '4', true, chessBoard)); //should print true
	System.out.println("White a1 to a7 " + rookPossibleMove('a', '7', 'a', '1', true, chessBoard)); //should return true
	System.out.println("White a1 to h1 " + rookPossibleMove('h', '1', 'a', '1', true, chessBoard)); //should return false
	
	System.out.println("Black a1 to h1 " + rookPossibleMove('h', '1', 'a', '1', false, chessBoard)); //should return false
	System.out.println("Black a1 to h1 " + rookPossibleMove('a', '8', 'a', '8', true, chessBoard)); //should return false
    }

    /**
       print a chess board
    **/
    public static void printChessBoard(char[][] chessBoard) {
    	    for(int row = 0; row < 8; row++) {
    	    	    for(int col = 0; col < 8; col++) {
    	    	    	    System.out.print(chessBoard[row][col]);
    	    	    }
    	    	    System.out.println();
    	    }
    	    System.out.println();
    }
    
    /**
       This method sets a chessBoard to an empty one
       (characters that do not denote a chess piece)
       White squares are indicated by spaces and
        black squares by +s
    **/
    public static void initialize(char[][] chessBoard) {
    	    for (int row = 0; row < 8; row++) {
    	    	    for (int col = 0; col < 8; col++) {
    	    	    	    chessBoard[row][col] = ((col + row) % 2 == 0) ? ' ' : '+';     
    	    	    }
    	    }
    }



    /**
       This method adds a chess piece to a chessBoard at 
       a given row and column.
    **/
    public static void addPiece(char piece, char column, char row, char[][] chessBoard) {
    	    int rowIndex = '8' - row;
    	    int colIndex = column - 'a';
    	    
    	    chessBoard[rowIndex][colIndex] = piece;
    }
    
    public static boolean rookPossibleMove(char destCol, char destRow, char currentCol, char currentRow, boolean isWhite, char[][] chessBoard){
    	    if(destCol == currentCol && isMoveBlocked(destCol, destRow, currentCol, currentRow, isWhite, chessBoard)){
    	    	    return (canTake(destCol, destRow, currentCol, currentRow, isWhite, chessBoard));    
    	    }
    	    else if(destRow == currentRow && isMoveBlocked(destCol, destRow, currentCol, currentRow, isWhite, chessBoard)){
    	    	    return (canTake(destCol, destRow, currentCol, currentRow, isWhite, chessBoard));
    	    }
    	    return false;  
    }
    
    public static boolean isMoveBlocked(char destCol, char destRow, char currentCol, char currentRow, boolean isWhite, char[][] chessBoard) {
    	    int conDestCol = destCol - 'a';
    	    int conDestRow = '8' - destRow;
    	    int conCurrentCol = currentCol - 'a';
    	    int conCurrentRow = '8' - currentRow;
    	    
    	    if(conCurrentCol<conDestCol) {
    	    	    //move up piece in way
    	    	    for(int i = conCurrentRow; i>conDestRow; i--) {
    	    	    	    if (chessBoard[conDestRow][i]!=' ' ||  chessBoard[conDestRow][i]!='+') {
    	    	    	    	    return false;
    	    	    	    }
    	    	    }
    	    }
    	    
    	    if(conCurrentCol>conDestCol) {
    	    	    //move down piece in way
    	    	    for(int i = conCurrentRow; i<conDestRow; i++){
    	    	    	    if (chessBoard[conDestRow][i]!=' ' ||  chessBoard[conDestRow][i]!='+') {
    	    	    	    	    return false;
    	    	    	    }		    
    	    	    }
    	    }
    	    
    	    if(conCurrentRow<conDestRow) {
    	    	    //move right piece in way
    	    	    for(int i = conCurrentCol; i < conDestCol; i++){
    	    	    	    if (chessBoard[i][conDestCol]!=' ' ||  chessBoard[i][conDestCol]!='+') {
    	    	    	    	    return false;
    	    	    	    }	
    	    	    }
    	    }
    	    
    	    if(conCurrentRow>conDestRow) {
    	    	    //move left peice in way
    	    	    for(int i = conCurrentCol; i> conDestCol; i--){
    	    	    	    if (chessBoard[i][conDestCol]!=' ' ||  chessBoard[i][conDestCol]!='+') {
    	    	    	    	    return false;
    	    	    	    }	    
    	    	    }
    	    }
    	    return true;
    }
    
    
    public static boolean canTake(char destCol, char destRow, char currentCol, char currentRow, boolean isWhite, char[][] chessBoard){
    	    int conDestCol = destCol - 'a';
    	    int conDestRow = '8' - destRow;
    	    if ( chessBoard[conDestRow] [conDestCol] != ' ' && chessBoard[conDestRow] [conDestCol] != '+'){
    	    	    if (isWhite && Character.isUpperCase(chessBoard[conDestRow][conDestCol])) {
    	    	    	    return true;
    	    	    } else if (isWhite && !Character.isUpperCase(chessBoard[conDestRow][conDestCol])) {
    	    	    	    return false;
    	    	    }
    	    	    
    	    	    if (!isWhite && !Character.isUpperCase(chessBoard[conDestRow][conDestCol])) {
    	    	    	    return true;
    	    	    } else if (!isWhite && Character.isUpperCase(chessBoard[conDestRow][conDestCol])) {
    	    	    	    return false;
    	    	    }
    	    }
    	    return true;
    	     
    }
}
